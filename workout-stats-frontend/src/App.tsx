import { useState } from "react";
import "./App.css";
import { WeightUnit, Workout } from "./models/workout";
import { WorkoutUpload } from "./components/WorkoutUpload/WorkoutUpload";
import { Dashboard } from "./components/Dashboard/Dashboard";
import demoDataJson from "./demoData.json";

function App() {
  const [workouts, setWorkouts] = useState<Workout[]>([]);

  const setDemoData = () => {
    setWorkouts(
      demoDataJson.map((w) => {
        return {
          ...w,
          startTime: new Date(new Date().getTime() - w.secondsInPast * 1000),
          exerciseSets: (w.exerciseSets || []).map((es) => {
            return {
              ...es,
              startTime: new Date(
                new Date().getTime() - es.secondsInPast * 1000
              ),
              weightUnit: es.weightUnit as WeightUnit,
            };
          }),
        };
      })
    );
  };

  const handleDemoClick = (e: React.MouseEvent) => {
    e.preventDefault();
    setDemoData();
  };

  if (!workouts || !workouts.length) {
    return (
      <>
        <div className="mx-auto md:w-1/2">
          <div className="text-xl my-10">
            This is a strength training analytics tool meant to complement
            Garmin's UI. To start, upload one or more files generated by the{" "}
            <a
              className="underline"
              href="https://github.com/labsansis/garmin-workout-downloader"
            >
              Garmin Workout Downloader
            </a>{" "}
            browser plugin.
          </div>

          <WorkoutUpload setWorkouts={setWorkouts} />

          <div className="text-lg my-10">
            or look at a{" "}
            <a href="#" onClick={handleDemoClick} className="underline">
              live demo
            </a>{" "}
            instead.
          </div>
        </div>
      </>
    );
  }

  return (
    <>
      <Dashboard workouts={workouts} />
    </>
  );
}

export default App;
